
exports[`compile parser node 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x+y add op 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x+y add op 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x+y add w/ type cast i32 -> i32 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x+y add w/ type cast i32 -> bool 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x+y add w/ type cast bool -> i32 1`] = `
"
  (call $__begin__)"
`;

exports[`compile !x logical Not 1`] = `
"
  (call $__begin__)"
`;

exports[`compile !x logical Not w/ f32 1`] = `
"
  (call $__begin__)"
`;

exports[`compile -x negate i32 1`] = `
"
  (call $__begin__)"
`;

exports[`compile -x negate f32 1`] = `
"
  (call $__begin__)"
`;

exports[`compile -x negate bool 1`] = `
"
  (call $__begin__)"
`;

exports[`compile function declaration with arg default literal 1`] = `
Array [
  Object {
    "default": Array [
      "i32.const",
      Token {
        "0": "1",
        "group": "num",
      },
    ],
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "type": "bool",
  },
]
`;

exports[`compile function declaration with exported arguments 1`] = `
Array [
  Object {
    "default": Array [
      "global.get",
      "$export/a/b",
    ],
    "export": true,
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "originalDefault": Array [
      "i32.const",
      Token {
        "0": "1",
        "group": "num",
      },
    ],
    "type": "bool",
  },
]
`;

exports[`compile function declaration with arg range 1`] = `
Array [
  Object {
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "range": Array [
      Array [
        "i32.const",
        Token {
          "0": "1",
          "group": "num",
        },
      ],
      Array [
        "i32.const",
        Token {
          "0": "2",
          "group": "num",
        },
      ],
    ],
    "type": "i32",
  },
]
`;

exports[`compile function declaration with multiple args ranges 1`] = `
Array [
  Object {
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "range": Array [
      Array [
        "i32.const",
        Token {
          "0": "1",
          "group": "num",
        },
      ],
      Array [
        "i32.const",
        Token {
          "0": "2",
          "group": "num",
        },
      ],
    ],
    "type": "i32",
  },
  Object {
    "id": Token {
      "0": "c",
      "group": "ids",
    },
    "type": "f32",
  },
  Object {
    "id": Token {
      "0": "y",
      "group": "ids",
    },
    "range": Array [
      Array [
        "i32.const",
        Token {
          "0": "3",
          "group": "num",
        },
      ],
      Array [
        "i32.const",
        Token {
          "0": "5",
          "group": "num",
        },
      ],
    ],
    "type": "i32",
  },
]
`;

exports[`compile function declaration with arg range expression 1`] = `
Array [
  Object {
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "range": Array [
      Array [
        "i32.add",
        Array [
          "i32.const",
          Token {
            "0": "1",
            "group": "num",
          },
        ],
        Array [
          "i32.const",
          Token {
            "0": "2",
            "group": "num",
          },
        ],
      ],
      Array [
        "i32.add",
        Array [
          "i32.const",
          Token {
            "0": "2",
            "group": "num",
          },
        ],
        Array [
          "i32.const",
          Token {
            "0": "3",
            "group": "num",
          },
        ],
      ],
    ],
    "type": "i32",
  },
]
`;

exports[`compile function declaration with arg range expression and default 1`] = `
Array [
  Object {
    "default": Array [
      "i32.const",
      Token {
        "0": "4",
        "group": "num",
      },
    ],
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "range": Array [
      Array [
        "i32.add",
        Array [
          "i32.const",
          Token {
            "0": "1",
            "group": "num",
          },
        ],
        Array [
          "i32.const",
          Token {
            "0": "2",
            "group": "num",
          },
        ],
      ],
      Array [
        "i32.add",
        Array [
          "i32.const",
          Token {
            "0": "2",
            "group": "num",
          },
        ],
        Array [
          "i32.const",
          Token {
            "0": "3",
            "group": "num",
          },
        ],
      ],
    ],
    "type": "i32",
  },
]
`;

exports[`compile function declaration with arg range expression and default expression 1`] = `
Array [
  Object {
    "default": Array [
      "f32.add",
      Array [
        "f32.const",
        Token {
          "0": "1",
          "1": ".",
          "2": "5",
          "group": "num",
        },
      ],
      Array [
        "f32.const",
        Token {
          "0": "2",
          "1": ".",
          "2": "5",
          "group": "num",
        },
      ],
    ],
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "range": Array [
      Array [
        "f32.convert_i32_s",
        Array [
          "i32.add",
          Array [
            "i32.const",
            Token {
              "0": "1",
              "group": "num",
            },
          ],
          Array [
            "i32.const",
            Token {
              "0": "2",
              "group": "num",
            },
          ],
        ],
      ],
      Array [
        "f32.convert_i32_s",
        Array [
          "i32.add",
          Array [
            "i32.const",
            Token {
              "0": "2",
              "group": "num",
            },
          ],
          Array [
            "i32.const",
            Token {
              "0": "3",
              "group": "num",
            },
          ],
        ],
      ],
    ],
    "type": "f32",
  },
]
`;

exports[`compile function declaration with arg range and default 1`] = `
Array [
  Object {
    "default": Array [
      "f32.const",
      Token {
        "0": "1",
        "1": ".",
        "2": "5",
        "group": "num",
      },
    ],
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "range": Array [
      Array [
        "f32.convert_i32_s",
        Array [
          "i32.const",
          Token {
            "0": "1",
            "group": "num",
          },
        ],
      ],
      Array [
        "f32.convert_i32_s",
        Array [
          "i32.const",
          Token {
            "0": "2",
            "group": "num",
          },
        ],
      ],
    ],
    "type": "f32",
  },
]
`;

exports[`compile function declaration with arg range and default expression 1`] = `
Array [
  Object {
    "default": Array [
      "f32.add",
      Array [
        "f32.const",
        Token {
          "0": "1",
          "1": ".",
          "2": "5",
          "group": "num",
        },
      ],
      Array [
        "f32.const",
        Token {
          "0": "2",
          "1": ".",
          "2": "5",
          "group": "num",
        },
      ],
    ],
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "range": Array [
      Array [
        "f32.convert_i32_s",
        Array [
          "i32.const",
          Token {
            "0": "1",
            "group": "num",
          },
        ],
      ],
      Array [
        "f32.convert_i32_s",
        Array [
          "i32.const",
          Token {
            "0": "2",
            "group": "num",
          },
        ],
      ],
    ],
    "type": "f32",
  },
]
`;

exports[`compile function declaration with expression referencing variables 1`] = `
Array [
  Object {
    "default": Array [
      "i32.div_s",
      Array [
        "global.get",
        "$x",
      ],
      Array [
        "i32.const",
        Token {
          "0": "2",
          "group": "num",
        },
      ],
    ],
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "range": Array [
      Array [
        "i32.const",
        Token {
          "0": "1",
          "group": "num",
        },
      ],
      Array [
        "i32.const",
        Token {
          "0": "2",
          "group": "num",
        },
      ],
    ],
    "type": "i32",
  },
]
`;

exports[`compile function declaration with expression referencing variables 2`] = `"(start $__start__) (global $x (mut i32) (i32.const 0)) (func $__begin__ (export \\"__begin__\\") (global.set $x (i32.const 10))) (func $__start__ (export \\"__start__\\") (call $__begin__)) (func $a (export \\"a\\") (param $b i32) (result i32) (i32.const 1)) (func $f (export \\"f\\") (result i32) (call $a (i32.div_s (global.get $x) (i32.const 2))))"`;

exports[`compile function declaration with range referencing variables 1`] = `
Array [
  Object {
    "default": Array [
      "i32.div_s",
      Array [
        "global.get",
        "$x",
      ],
      Array [
        "i32.const",
        Token {
          "0": "2",
          "group": "num",
        },
      ],
    ],
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "range": Array [
      Array [
        "i32.const",
        Token {
          "0": "1",
          "group": "num",
        },
      ],
      Array [
        "global.get",
        "$x",
      ],
    ],
    "type": "i32",
  },
]
`;

exports[`compile function declaration with range referencing variables 2`] = `"(start $__start__) (global $x (mut i32) (i32.const 0)) (func $__begin__ (export \\"__begin__\\") (global.set $x (i32.const 10))) (func $__start__ (export \\"__start__\\") (call $__begin__)) (func $a (export \\"a\\") (param $b i32) (result i32) (i32.const 1)) (func $f (export \\"f\\") (result i32) (call $a (i32.div_s (global.get $x) (i32.const 2))))"`;

exports[`compile function declaration with arg default expression 1`] = `
Array [
  Object {
    "default": Array [
      "i32.add",
      Array [
        "i32.const",
        Token {
          "0": "1",
          "group": "num",
        },
      ],
      Array [
        "i32.const",
        Token {
          "0": "2",
          "group": "num",
        },
      ],
    ],
    "id": Token {
      "0": "b",
      "group": "ids",
    },
    "type": "i32",
  },
]
`;

exports[`compile assignment global 1`] = `
"
  (call $__begin__)"
`;

exports[`compile assignment global 2`] = `
"
  (call $__begin__)"
`;

exports[`compile assignment multi value 1`] = `
"
  (call $__begin__)"
`;

exports[`compile assignment local 1`] = `
"
  (local.set $a 
    (i32.const 1))"
`;

exports[`compile assignment find scope 1`] = `
"
  (global.set $a 
    (i32.const 2)) 
  (local.set $b 
    (i32.const 3))"
`;

exports[`compile parameters 1`] = `
"
  (local.set $a 
    (f32.convert_i32_u 
      (i32.const 1)))"
`;

exports[`compile parameters shadow globals 1`] = `
"
  (global.set $a 
    (i32.const 2))"
`;

exports[`compile parameters shadow globals 2`] = `
"
  (local.set $a 
    (f32.convert_i32_s 
      (i32.const 2)))"
`;

exports[`compile function call 1`] = `
"
  (call $__begin__)"
`;

exports[`compile function call 2`] = `
"
  (call $__begin__)"
`;

exports[`compile function call 3`] = `
"
  (call $__begin__)"
`;

exports[`compile function call 4`] = `
"
  (call $__begin__)"
`;

exports[`compile function call arg missing use default 1`] = `
"
  (call $__begin__)"
`;

exports[`compile function call arg missing use default 2`] = `
"
  (call $__begin__)"
`;

exports[`compile function call arg missing no default, use argument range 1`] = `
"
  (call $__begin__)"
`;

exports[`compile function call arg passed, use argument range for type cast 1`] = `
"
  (call $__begin__)"
`;

exports[`compile variable get global 1`] = `
"
  (call $__begin__)"
`;

exports[`compile variable get local 1`] = `
"
  (local.set $a 
    (i32.const 1)) 
  (local.get $a)"
`;

exports[`compile variable get local 2`] = `"(start $__start__) (func $__begin__ (export \\"__begin__\\")) (func $__start__ (export \\"__start__\\") (call $__begin__)) (func $f (export \\"f\\") (result i32) (local $a i32) (local.set $a (i32.const 1)) (local.get $a))"`;

exports[`compile variable get global from within local context 1`] = `
"
  (global.get $a)"
`;

exports[`compile parameter shadow global variable 1`] = `
"
  (local.get $a)"
`;

exports[`compile x?y:z ternary 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x?y:z ternary 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x?y:z ternary 3`] = `
"
  (call $__begin__)"
`;

exports[`compile x?y:z ternary 4`] = `
"
  (call $__begin__)"
`;

exports[`compile x%y modulo 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x%y modulo 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x%y modulo 3`] = `
"
  (call $__begin__)"
`;

exports[`compile x%y modulo 4`] = `
"
  (call $__begin__)"
`;

exports[`compile x<<y bitwise shift left 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x<<y bitwise shift left 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x>>y bitwise shift right 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x>>y bitwise shift right 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x&y bitwise AND 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x&y bitwise AND 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x|y bitwise OR 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x|y bitwise OR 2`] = `
"
  (call $__begin__)"
`;

exports[`compile ~y bitwise NOT 1`] = `
"
  (call $__begin__)"
`;

exports[`compile ~y bitwise NOT 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x&&y logical And 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x&&y logical And 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x&&y logical And 3`] = `
"
  (call $__begin__)"
`;

exports[`compile x||y logical Or 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x||y logical Or 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x||y logical Or 3`] = `
"
  (call $__begin__)"
`;

exports[`compile x==y equality 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x==y equality 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x!=y non-equality 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x!=y non-equality 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x<y less than 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x<y less than 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x>y greater than 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x>y greater than 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x<=y less than or equal 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x<=y less than or equal 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x>=y greater than or equal 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x>=y greater than or equal 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x+=y variable add 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x+=y variable add 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x-=y variable sub 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x-=y variable sub 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x*=y variable mul 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x*=y variable mul 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x/=y variable div 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x/=y variable div 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x%=y variable mod 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x%=y variable mod 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x<<=y variable shift left 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x<<=y variable shift left 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x>>=y variable shift right 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x>>=y variable shift right 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x&=y variable bitwise AND 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x&=y variable bitwise AND 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x|=y variable bitwise OR 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x|=y variable bitwise OR 2`] = `
"
  (call $__begin__)"
`;

exports[`compile ++x variable add 1 pre 1`] = `
"
  (call $__begin__)"
`;

exports[`compile ++x variable add 1 pre 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x++ variable add 1 post 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x++ variable add 1 post 2`] = `
"
  (call $__begin__)"
`;

exports[`compile --x variable sub 1 pre 1`] = `
"
  (call $__begin__)"
`;

exports[`compile --x variable sub 1 pre 2`] = `
"
  (call $__begin__)"
`;

exports[`compile x-- variable sub 1 post 1`] = `
"
  (call $__begin__)"
`;

exports[`compile x-- variable sub 1 post 2`] = `
"
  (call $__begin__)"
`;

exports[`compile load operations 1`] = `
"

    (local.set $local_mem_ptr 
      (global.get $global_mem_ptr)) 
    (local.set $x 
      (f32.load offset=0 
        (local.get $local_mem_ptr))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (i32.const 4) 
        (global.get $global_mem_ptr)))"
`;

exports[`compile load operations 2`] = `
"

    (local.set $local_mem_ptr 
      (global.get $global_mem_ptr)) 
    (local.set $x 
      (f32.load offset=0 
        (local.get $local_mem_ptr))) 
    (local.set $y 
      (f32.load offset=4 
        (local.get $local_mem_ptr))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (i32.const 8) 
        (global.get $global_mem_ptr)))"
`;

exports[`compile store operations 1`] = `
"

    (local.set $local_mem_ptr 
      (global.get $global_mem_ptr)) 
    (local.set $x 
      (f32.load offset=0 
        (local.get $local_mem_ptr))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (i32.const 4) 
        (global.get $global_mem_ptr))) 

    (f32.store offset=0 
      (local.get $local_mem_ptr) 
      (f32.const 1.5))"
`;

exports[`compile store operations 2`] = `
"

    (local.set $local_mem_ptr 
      (global.get $global_mem_ptr)) 
    (local.set $x 
      (f32.load offset=0 
        (local.get $local_mem_ptr))) 
    (local.set $y 
      (f32.load offset=4 
        (local.get $local_mem_ptr))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (i32.const 8) 
        (global.get $global_mem_ptr))) 

    (f32.store offset=0 
      (local.get $local_mem_ptr) 
      (f32.const 1.5)) 
    (f32.store offset=4 
      (local.get $local_mem_ptr) 
      (f32.convert_i32_s 
        (i32.const 2)))"
`;

exports[`compile store operations 3`] = `
"

    (local.set $local_mem_ptr 
      (global.get $global_mem_ptr)) 
    (local.set $x 
      (f32.load offset=0 
        (local.get $local_mem_ptr))) 
    (local.set $y 
      (f32.load offset=4 
        (local.get $local_mem_ptr))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (i32.const 8) 
        (global.get $global_mem_ptr))) 

    (f32.store offset=4 
      (local.get $local_mem_ptr) 
      (f32.const 1.5)) 
    (f32.store offset=0 
      (local.get $local_mem_ptr) 
      (f32.convert_i32_s 
        (i32.const 2)))"
`;

exports[`compile buffer allocate 1`] = `
"

    (local.set $# 
      (global.get $global_mem_ptr)) 
    (local.set $#_size 
      (i32.const 4)) 
    (local.set $#_length 
      (i32.shl 
        (i32.mul 
          (local.get $#_size) 
          (i32.const 2)) 
        (i32.const 2))) 
    (local.set $#_needle 
      (i32.load 
        (local.get $#))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (global.get $global_mem_ptr) 
        (i32.add 
          (i32.const 4) 
          (local.get $#_length))))"
`;

exports[`compile buffer allocate 2`] = `
"
  (call $__begin__)"
`;

exports[`compile buffer allocate 3`] = `
"
  (call $__begin__)"
`;

exports[`compile buffer allocate 4`] = `
"
  (call $__begin__)"
`;

exports[`compile buffer allocate 5`] = `
"

    (local.set $# 
      (global.get $global_mem_ptr)) 
    (local.set $#_size 
      (i32.const 4)) 
    (local.set $#_length 
      (i32.shl 
        (i32.mul 
          (local.get $#_size) 
          (i32.const 1)) 
        (i32.const 2))) 
    (local.set $#_needle 
      (i32.load 
        (local.get $#))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (global.get $global_mem_ptr) 
        (i32.add 
          (i32.const 4) 
          (local.get $#_length)))) 
  (f32.const 0.0)"
`;

exports[`compile buffer read 1`] = `
"

    (local.set $# 
      (global.get $global_mem_ptr)) 
    (local.set $#_size 
      (i32.const 4)) 
    (local.set $#_length 
      (i32.shl 
        (i32.mul 
          (local.get $#_size) 
          (i32.const 1)) 
        (i32.const 2))) 
    (local.set $#_needle 
      (i32.load 
        (local.get $#))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (global.get $global_mem_ptr) 
        (i32.add 
          (i32.const 4) 
          (local.get $#_length)))) 
  (f32.load offset=4 
    (i32.add 
      (local.get $#) 
      (i32.trunc_f32_s 
        (call $modwrap 
          (f32.convert_i32_s 
            (i32.shl 
              (i32.mul 
                (i32.add 
                  (i32.const 2) 
                  (local.get $#_needle)) 
                (i32.const 1)) 
              (i32.const 2))) 
          (f32.convert_i32_s 
            (local.get $#_length))))))"
`;

exports[`compile buffer negative index read 1`] = `
"
  (start $__start__) 
  (func $__begin__ 
    (export \\"__begin__\\")) 
  (func $__start__ 
    (export \\"__start__\\") 
    (call $__begin__)) 
  (func $f 
    (export \\"f\\") 
    (result f32) 
    (local $# i32) 
    (local $#_size i32) 
    (local $#_length i32) 
    (local $#_needle i32) 
    (local $temp_buffer_pos i32) 

      (local.set $# 
        (global.get $global_mem_ptr)) 
      (local.set $#_size 
        (i32.const 1)) 
      (local.set $#_length 
        (i32.shl 
          (i32.mul 
            (local.get $#_size) 
            (i32.const 1)) 
          (i32.const 2))) 
      (local.set $#_needle 
        (i32.load 
          (local.get $#))) 
      (global.set $global_mem_ptr 
        (i32.add 
          (global.get $global_mem_ptr) 
          (i32.add 
            (i32.const 4) 
            (local.get $#_length)))) 

      (local.set $temp_buffer_pos 
        (i32.add 
          (local.get $#) 
          (i32.trunc_f32_s 
            (call $modwrap 
              (f32.convert_i32_s 
                (i32.shl 
                  (i32.mul 
                    (local.get $#_needle) 
                    (i32.const 1)) 
                  (i32.const 2))) 
              (f32.convert_i32_s 
                (local.get $#_length)))))) 
      (f32.store offset=4 
        (local.get $temp_buffer_pos) 
        (f32.convert_i32_s 
          (i32.const 42))) 
      (local.set $#_needle 
        (i32.add 
          (i32.const 1) 
          (local.get $#_needle))) 
      (i32.store 
        (local.get $#) 
        (local.get $#_needle)) 
    (f32.load offset=4 
      (i32.add 
        (local.get $#) 
        (i32.trunc_f32_s 
          (call $modwrap 
            (f32.convert_i32_s 
              (i32.shl 
                (i32.mul 
                  (i32.add 
                    (i32.mul 
                      (i32.const -1) 
                      (i32.const 1)) 
                    (local.get $#_needle)) 
                  (i32.const 1)) 
                (i32.const 2))) 
            (f32.convert_i32_s 
              (local.get $#_length)))))))"
`;

exports[`compile buffer read tuple 1`] = `
"

    (local.set $# 
      (global.get $global_mem_ptr)) 
    (local.set $#_size 
      (i32.const 4)) 
    (local.set $#_length 
      (i32.shl 
        (i32.mul 
          (local.get $#_size) 
          (i32.const 2)) 
        (i32.const 2))) 
    (local.set $#_needle 
      (i32.load 
        (local.get $#))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (global.get $global_mem_ptr) 
        (i32.add 
          (i32.const 4) 
          (local.get $#_length)))) 

    (local.set $temp_buffer_pos 
      (i32.add 
        (local.get $#) 
        (i32.trunc_f32_s 
          (call $modwrap 
            (f32.convert_i32_s 
              (i32.shl 
                (i32.mul 
                  (i32.add 
                    (i32.const 2) 
                    (local.get $#_needle)) 
                  (i32.const 2)) 
                (i32.const 2))) 
            (f32.convert_i32_s 
              (local.get $#_length)))))) 
    (local.set $a 
      (f32.load offset=4 
        (local.get $temp_buffer_pos))) 
    (local.set $b 
      (f32.load offset=8 
        (local.get $temp_buffer_pos)))"
`;

exports[`compile buffer read tuple 2`] = `
"

    (local.set $# 
      (global.get $global_mem_ptr)) 
    (local.set $#_size 
      (i32.const 4)) 
    (local.set $#_length 
      (i32.shl 
        (i32.mul 
          (local.get $#_size) 
          (i32.const 3)) 
        (i32.const 2))) 
    (local.set $#_needle 
      (i32.load 
        (local.get $#))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (global.get $global_mem_ptr) 
        (i32.add 
          (i32.const 4) 
          (local.get $#_length)))) 

    (local.set $temp_buffer_pos 
      (i32.add 
        (local.get $#) 
        (i32.trunc_f32_s 
          (call $modwrap 
            (f32.convert_i32_s 
              (i32.shl 
                (i32.mul 
                  (i32.add 
                    (i32.const 2) 
                    (local.get $#_needle)) 
                  (i32.const 3)) 
                (i32.const 2))) 
            (f32.convert_i32_s 
              (local.get $#_length)))))) 
    (local.set $a 
      (f32.load offset=4 
        (local.get $temp_buffer_pos))) 
    (local.set $b 
      (f32.load offset=8 
        (local.get $temp_buffer_pos)))"
`;

exports[`compile buffer write 1`] = `
"

    (local.set $# 
      (global.get $global_mem_ptr)) 
    (local.set $#_size 
      (i32.const 4)) 
    (local.set $#_length 
      (i32.shl 
        (i32.mul 
          (local.get $#_size) 
          (i32.const 1)) 
        (i32.const 2))) 
    (local.set $#_needle 
      (i32.load 
        (local.get $#))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (global.get $global_mem_ptr) 
        (i32.add 
          (i32.const 4) 
          (local.get $#_length)))) 

    (local.set $temp_buffer_pos 
      (i32.add 
        (local.get $#) 
        (i32.trunc_f32_s 
          (call $modwrap 
            (f32.convert_i32_s 
              (i32.shl 
                (i32.mul 
                  (local.get $#_needle) 
                  (i32.const 1)) 
                (i32.const 2))) 
            (f32.convert_i32_s 
              (local.get $#_length)))))) 
    (f32.store offset=4 
      (local.get $temp_buffer_pos) 
      (f32.convert_i32_s 
        (i32.const 2))) 
    (local.set $#_needle 
      (i32.add 
        (i32.const 1) 
        (local.get $#_needle))) 
    (i32.store 
      (local.get $#) 
      (local.get $#_needle))"
`;

exports[`compile buffer write tuple 1`] = `
"

    (local.set $# 
      (global.get $global_mem_ptr)) 
    (local.set $#_size 
      (i32.const 4)) 
    (local.set $#_length 
      (i32.shl 
        (i32.mul 
          (local.get $#_size) 
          (i32.const 2)) 
        (i32.const 2))) 
    (local.set $#_needle 
      (i32.load 
        (local.get $#))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (global.get $global_mem_ptr) 
        (i32.add 
          (i32.const 4) 
          (local.get $#_length)))) 

    (local.set $temp_buffer_pos 
      (i32.add 
        (local.get $#) 
        (i32.trunc_f32_s 
          (call $modwrap 
            (f32.convert_i32_s 
              (i32.shl 
                (i32.mul 
                  (local.get $#_needle) 
                  (i32.const 2)) 
                (i32.const 2))) 
            (f32.convert_i32_s 
              (local.get $#_length)))))) 
    (f32.store offset=4 
      (local.get $temp_buffer_pos) 
      (f32.convert_i32_s 
        (i32.const 2))) 
    (f32.store offset=8 
      (local.get $temp_buffer_pos) 
      (f32.convert_i32_s 
        (i32.const 3))) 
    (local.set $#_needle 
      (i32.add 
        (i32.const 1) 
        (local.get $#_needle))) 
    (i32.store 
      (local.get $#) 
      (local.get $#_needle))"
`;

exports[`compile buffer map/call/reduce 1`] = `
"

    (local.set $# 
      (global.get $global_mem_ptr)) 
    (local.set $#_size 
      (i32.const 4)) 
    (local.set $#_length 
      (i32.shl 
        (i32.mul 
          (local.get $#_size) 
          (i32.const 2)) 
        (i32.const 2))) 
    (local.set $#_needle 
      (i32.load 
        (local.get $#))) 
    (global.set $global_mem_ptr 
      (i32.add 
        (global.get $global_mem_ptr) 
        (i32.add 
          (i32.const 4) 
          (local.get $#_length)))) 

    (local.set $temp_buffer_pos 
      (i32.add 
        (local.get $#) 
        (i32.trunc_f32_s 
          (call $modwrap 
            (f32.convert_i32_s 
              (i32.shl 
                (i32.mul 
                  (local.get $#_needle) 
                  (i32.const 2)) 
                (i32.const 2))) 
            (f32.convert_i32_s 
              (local.get $#_length)))))) 
    (f32.store offset=4 
      (local.get $temp_buffer_pos) 
      (f32.convert_i32_s 
        (i32.const 2))) 
    (f32.store offset=8 
      (local.get $temp_buffer_pos) 
      (f32.convert_i32_s 
        (i32.const 3))) 
    (local.set $#_needle 
      (i32.add 
        (i32.const 1) 
        (local.get $#_needle))) 
    (i32.store 
      (local.get $#) 
      (local.get $#_needle)) 

    (local.set $temp_index 
      (i32.const 0)) 
    (local.set $temp_sum 
      (f32.const 0)) 
    (local.set $temp_buffer_pos 
      (local.get $#)) 
    (local.set $temp_buffer_one_index_length 
      (i32.shl 
        (i32.const 2) 
        (i32.const 2))) 
    (loop $loop 
      (local.set $temp_sum 
        (f32.add 
          (local.get $temp_sum) 
          (call $add 
            (f32.load offset=4 
              (local.get $temp_buffer_pos)) 
            (f32.load offset=8 
              (local.get $temp_buffer_pos))))) 
      (local.set $temp_buffer_pos 
        (i32.add 
          (local.get $temp_buffer_pos) 
          (local.get $temp_buffer_one_index_length))) 
      (local.set $temp_index 
        (i32.add 
          (local.get $temp_index) 
          (i32.const 1))) 
      (br_if $loop 
        (i32.ne 
          (local.get $temp_index) 
          (local.get $#_size)))) 
    (local.get $temp_sum)"
`;

exports[`compile buffer function with internal buffer 1`] = `
"
  (start $__start__) 
  (func $__begin__ 
    (export \\"__begin__\\")) 
  (func $__start__ 
    (export \\"__start__\\") 
    (call $__begin__)) 
  (func $v 
    (export \\"v\\") 
    (result f32) 
    (local $# i32) 
    (local $#_size i32) 
    (local $#_length i32) 
    (local $#_needle i32) 
    (local $y f32) 
    (local $temp_buffer_pos i32) 

      (local.set $# 
        (global.get $global_mem_ptr)) 
      (local.set $#_size 
        (i32.const 2)) 
      (local.set $#_length 
        (i32.shl 
          (i32.mul 
            (local.get $#_size) 
            (i32.const 1)) 
          (i32.const 2))) 
      (local.set $#_needle 
        (i32.load 
          (local.get $#))) 
      (global.set $global_mem_ptr 
        (i32.add 
          (global.get $global_mem_ptr) 
          (i32.add 
            (i32.const 4) 
            (local.get $#_length)))) 
    (local.set $y 
      (f32.load offset=4 
        (i32.add 
          (local.get $#) 
          (i32.trunc_f32_s 
            (call $modwrap 
              (f32.convert_i32_s 
                (i32.shl 
                  (i32.mul 
                    (i32.add 
                      (i32.const 0) 
                      (local.get $#_needle)) 
                    (i32.const 1)) 
                  (i32.const 2))) 
              (f32.convert_i32_s 
                (local.get $#_length))))))) 

      (local.set $temp_buffer_pos 
        (i32.add 
          (local.get $#) 
          (i32.trunc_f32_s 
            (call $modwrap 
              (f32.convert_i32_s 
                (i32.shl 
                  (i32.mul 
                    (local.get $#_needle) 
                    (i32.const 1)) 
                  (i32.const 2))) 
              (f32.convert_i32_s 
                (local.get $#_length)))))) 
      (f32.store offset=4 
        (local.get $temp_buffer_pos) 
        (f32.convert_i32_u 
          (i32.const 1))) 
      (local.set $#_needle 
        (i32.add 
          (i32.const 1) 
          (local.get $#_needle))) 
      (i32.store 
        (local.get $#) 
        (local.get $#_needle)) 
    (local.get $y)) 
  (func $f 
    (export \\"f\\") 
    (result f32) 
    (call $v))"
`;

exports[`compile quirky cases works 1`] = `
"
  (start $__start__) 
  (global $export/a/x 
    (export \\"export/a/x\\") 
    (mut f32) 
    (f32.const 0)) 
  (global $export/a/x/min 
    (export \\"export/a/x/min\\") 
    (mut f32) 
    (f32.const 0)) 
  (global $export/a/x/max 
    (export \\"export/a/x/max\\") 
    (mut f32) 
    (f32.const 1)) 
  (func $__begin__ 
    (export \\"__begin__\\")) 
  (func $__start__ 
    (export \\"__start__\\") 
    (call $__begin__) 
    (global.set $export/a/x 
      (f32.add 
        (global.get $export/a/x/min) 
        (f32.div 
          (f32.sub 
            (global.get $export/a/x/max) 
            (global.get $export/a/x/min)) 
          (f32.const 2))))) 
  (func $a 
    (export \\"a\\") 
    (param $x f32) 
    (result f32) 
    (local.get $x)) 
  (func $f 
    (export \\"f\\") 
    (result f32) 
    (call $a 
      (global.get $export/a/x)))"
`;

exports[`compile quirky cases negate then convert 1`] = `
"
  (start $__start__) 
  (func $__begin__ 
    (export \\"__begin__\\")) 
  (func $__start__ 
    (export \\"__start__\\") 
    (call $__begin__)) 
  (func $f 
    (export \\"f\\") 
    (result f32) 
    (f32.add 
      (f32.convert_i32_s 
        (i32.mul 
          (i32.const -1) 
          (i32.const 1))) 
      (f32.const 1.0)))"
`;
